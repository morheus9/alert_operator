import os
import logging
from kubernetes import client, config
from kubernetes.client.rest import ApiException
import redis
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import CallbackQuery
from aiogram.enums import ParseMode
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Kubernetes
try:
    config.load_incluster_config()
except config.ConfigException:
    config.load_kube_config()
k8s_client = client.CoreV1Api()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis
redis_client = redis.Redis(
    host=os.getenv("REDIS_HOST", "redis-service"),
    port=int(os.getenv("REDIS_PORT", 6379)),
    password=os.getenv("REDIS_PASSWORD", None),
    decode_responses=True,
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ–π–º—Å–ø–µ–π—Å–æ–≤
NAMESPACES_TO_MONITOR = os.getenv("NAMESPACES_TO_MONITOR", "").split(",")
EXCLUDED_NAMESPACES = os.getenv("EXCLUDED_NAMESPACES", "kube-system").split(",")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()


# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–æ–≤ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
def check_pods():
    problematic_pods = []
    try:
        namespaces = (
            NAMESPACES_TO_MONITOR
            if NAMESPACES_TO_MONITOR
            else [
                ns.metadata.name
                for ns in k8s_client.list_namespace().items
                if ns.metadata.name not in EXCLUDED_NAMESPACES
            ]
        )

        for namespace in namespaces:
            if redis_client.exists(f"pause:{namespace}"):
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {namespace} –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
                continue

            try:
                pods = k8s_client.list_namespaced_pod(namespace=namespace)
                for pod in pods.items:
                    if pod.status.phase not in ("Running", "Succeeded"):
                        problematic_pods.append(
                            (namespace, pod.metadata.name, pod.status.phase)
                        )
            except ApiException as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–µ–π–º—Å–ø–µ–π—Å–∞ {namespace}: {e}")
    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")

    return problematic_pods


# –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
async def scheduled_monitoring():
    while True:
        try:
            problematic_pods = await asyncio.to_thread(check_pods)
            if problematic_pods:
                message = "‚ö†Ô∏è **–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–æ–¥—ã:**\n"
                for ns, pod, status in problematic_pods:
                    message += f"- `{ns}/{pod}`: `{status}`\n"
                await bot.send_message(
                    chat_id=TELEGRAM_CHAT_ID,
                    text=message,
                    parse_mode=ParseMode.MARKDOWN,
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ scheduled_monitoring: {e}")
        await asyncio.sleep(60)


# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("üöÄ –ë–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Kubernetes Pods –∞–∫—Ç–∏–≤–µ–Ω!")


# –ö–æ–º–∞–Ω–¥–∞ /pause
@dp.message(Command("pause"))
async def cmd_pause(message: types.Message):
    namespaces = (
        NAMESPACES_TO_MONITOR
        if NAMESPACES_TO_MONITOR
        else [
            ns.metadata.name
            for ns in k8s_client.list_namespace().items
            if ns.metadata.name not in EXCLUDED_NAMESPACES
        ]
    )

    builder = InlineKeyboardBuilder()
    for ns in namespaces:
        builder.button(text=ns, callback_data=f"pause_{ns}")
    builder.adjust(1)

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–π–º—Å–ø–µ–π—Å –¥–ª—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:",
        reply_markup=builder.as_markup(),
    )


# –ö–æ–º–∞–Ω–¥–∞ /resume
@dp.message(Command("resume"))
async def cmd_resume(message: types.Message):
    paused_namespaces = [key.split(":")[1] for key in redis_client.keys("pause:*")]
    if not paused_namespaces:
        await message.answer("–ù–µ—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –Ω–µ–π–º—Å–ø–µ–π—Å–æ–≤.")
        return

    builder = InlineKeyboardBuilder()
    for ns in paused_namespaces:
        builder.button(text=ns, callback_data=f"resume_{ns}")
    builder.adjust(1)

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–π–º—Å–ø–µ–π—Å –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:",
        reply_markup=builder.as_markup(),
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫
@dp.callback_query(F.data.startswith("pause_"))
async def pause_callback(callback: CallbackQuery):
    namespace = callback.data.split("_")[1]
    redis_client.setex(f"pause:{namespace}", 3600, "true")
    await callback.message.edit_text(
        f"üîá –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è `{namespace}` –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ 1 —á–∞—Å.",
        parse_mode=ParseMode.MARKDOWN,
    )


@dp.callback_query(F.data.startswith("resume_"))
async def resume_callback(callback: CallbackQuery):
    namespace = callback.data.split("_")[1]
    redis_client.delete(f"pause:{namespace}")
    await callback.message.edit_text(
        f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è `{namespace}` –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω—ã.", parse_mode=ParseMode.MARKDOWN
    )


async def on_startup(dispatcher):
    asyncio.create_task(scheduled_monitoring())


if __name__ == "__main__":
    dp.startup.register(on_startup)
    dp.run_polling(bot)
